{"version":3,"sources":["logo.svg","fields/BlocklyReactField.jsx","fields/DateField.jsx","blocks/customblocks.js","Blockly/BlocklyComponent.jsx","Blockly/index.js","generator/generator.js","App.js","serviceWorker.js","index.js"],"names":["BlocklyReactField","SERIALIZABLE","this","div_","Blockly","getContentDiv","ReactDOM","render","border","sourceBlock_","style","colourTertiary","colourBorder","colourLight","setColour","getColour","showPositionedByField","dropdownDispose_","bind","unmountComponentAtNode","options","FieldRenderComponent","color","React","Component","register","ReactDateField","onDateSelected_","date","setValue","Date","hideIfOwner","value_","toLocaleDateString","fieldElement","textContent","selected","onChange","inline","testReactField","init","jsonInit","setStyle","reactDateField","instantiateBlock","executeBlock","queryBlock","setLocale","locale","BlocklyComponent","props","blocklyDiv","createRef","toolbox","initialXml","rest","children","primaryWorkspace","inject","current","setTheme","Themes","Dark","registerButtonCallback","console","log","Xml","domToWorkspace","textToDom","xml","Fragment","ref","id","xmlns","is","display","Block","p","createElement","Value","Field","Shadow","block","getField","getText","valueToCode","ORDER_NONE","branchCode","conditionCode","n","code","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","repeats","String","Number","getFieldValue","ORDER_ASSIGNMENT","branch","addLoopTrap","loopVar","variableDB_","getDistinctName","endVar","match","until","argument0","ORDER_LOGICAL_NOT","getName","ORDER_ATOMIC","workspace","definitions_","Object","create","functionNames_","reset","RESERVED_WORDS_","setVariableMap","getVariableMap","defvars","devVarList","allDeveloperVariables","i","length","push","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","getId","join","App","generateCode","event","BlocklyJS","workspaceToCode","simpleWorkspace","setState","renderedCode","deploy","a","loading","requestOptions","method","headers","body","JSON","stringify","title","fetch","then","response","json","data","onRefChange","node","state","success","addChangeListener","className","height","width","readOnly","trashcan","media","move","scrollbars","drag","wheel","type","name","disabled","maxWidth","backgroundColor","Spinner","animation","variant","split","map","line","class","placeholder","Button","marginLeft","marginRight","onClick","Boolean","window","location","hostname","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db5e0094.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Sample React Blockly Field.\n * This shows you how to create a custom Blockly field that renders a React\n * component inside of the dropdown div when shown.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as Blockly from 'blockly/core';\n\n\nclass BlocklyReactField extends Blockly.Field {\n\n  SERIALIZABLE = true\n  \n  static fromJson(options) {\n    return new BlocklyReactField(options['text']);\n  }\n\n  showEditor_() {\n    this.div_ = Blockly.DropDownDiv.getContentDiv();\n    ReactDOM.render(this.render(),\n      this.div_);\n\n    var border = this.sourceBlock_.style.colourTertiary;\n    border = border.colourBorder || border.colourLight;\n    Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), border);\n\n    Blockly.DropDownDiv.showPositionedByField(\n      this, this.dropdownDispose_.bind(this));\n  }\n\n  dropdownDispose_() {\n    ReactDOM.unmountComponentAtNode(this.div_);\n  }\n\n  render() {\n    return <FieldRenderComponent />\n  }\n}\n\nclass FieldRenderComponent extends React.Component {\n\n  render() {\n    return <div style={{ color: '#fff' }}>\n      Hello from React!\n        </div>;\n  }\n}\n\nBlockly.fieldRegistry.register('field_react_component', BlocklyReactField);\n\nexport default BlocklyReactField;\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview React date field that uses the react-datepicker package.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from 'react';\nimport * as Blockly from 'blockly/core';\n\nimport BlocklyReactField from './BlocklyReactField';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nclass ReactDateField extends BlocklyReactField {\n\n  static fromJson(options) {\n    return new ReactDateField(new Date(options['date']));\n  }\n  \n  onDateSelected_ = (date) => {\n    this.setValue(new Date(date));\n    Blockly.DropDownDiv.hideIfOwner(this, true);\n  }\n\n  getText_() {\n    return this.value_.toLocaleDateString();\n  };\n\n  fromXml(fieldElement) {\n    this.setValue(new Date(fieldElement.textContent));\n  }\n\n  render() {\n    return <DatePicker\n        selected={this.value_}\n        onChange={this.onDateSelected_}\n        inline />\n  }\n}\n\nBlockly.fieldRegistry.register('field_react_date', ReactDateField);\n\nexport default ReactDateField;\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n\n\nimport * as Blockly from 'blockly/core';\n\n// Since we're using json to initialize the field, we'll need to import it.\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\n\nvar testReactField = {\n  \"type\": \"test_react_field\",\n  \"message0\": \"custom field %1\",\n  \"args0\": [\n    {\n      \"type\": \"field_react_component\",\n      \"name\": \"FIELD\",\n      \"text\": \"Click me\"\n    },\n  ],\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n};\n\nBlockly.Blocks['test_react_field'] = {\n  init: function() {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  }\n};\n\nvar reactDateField = {\n  \"type\": \"test_react_date_field\",\n  \"message0\": \"date field %1\",\n  \"args0\": [\n    {\n      \"type\": \"field_react_date\",\n      \"name\": \"DATE\",\n      \"date\": \"01/01/2020\"\n    },\n  ],\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n};\n\nBlockly.Blocks['test_react_date_field'] = {\n  init: function() {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  }\n};\n\nvar instantiateBlock = {\n  \"type\": \"instantiate\",\n  \"message0\": \"Instantiate\",\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 0,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\n\nBlockly.Blocks['instantiate'] = {\n\n  init: function() {\n    this.jsonInit(instantiateBlock);\n  }\n};\n\nvar executeBlock = {\n  \"type\": \"execute\",\n  \"message0\": \"Execute\",\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 0,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\n\nBlockly.Blocks['execute'] = {\n\n  init: function() {\n    this.jsonInit(executeBlock);\n  }\n};\n\nvar queryBlock = {\n  \"type\": \"query\",\n  \"message0\": \"Query\",\n  \"inputsInline\": true,\n  \"previousStatement\": null,\n  \"colour\": 0,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\n\nBlockly.Blocks['query'] = {\n\n  init: function() {\n    this.jsonInit(queryBlock);\n  }\n};","/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Blockly React Component.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from \"react\";\nimport \"./BlocklyComponent.css\";\n\nimport Blockly from \"blockly/core\";\nimport locale from \"blockly/msg/en\";\nimport \"blockly/blocks\";\nimport \"../blocks/customblocks\";\n\nBlockly.setLocale(locale);\n\nclass BlocklyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.blocklyDiv = React.createRef();\n    this.toolbox = React.createRef();\n  }\n\n    componentDidMount() {\n        var toolboxx = {\n            \"kind\": \"categoryToolbox\",\n            \"contents\": [\n              {\n                \"kind\": \"category\",\n                \"name\": \"Control\",\n                \"contents\": [\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"controls_if\"\n                  }\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"logic_compare\"\n                  // }\n                ]\n              },\n              {\n                \"kind\": \"category\",\n                \"name\": \"Logic\",\n                \"contents\": [\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"logic_compare\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"logic_operation\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"logic_boolean\"\n                  }\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"logic_negate\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"logic_null\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"logic_ternary\"\n                  // }\n                ]\n              },\n              {\n                \"kind\": \"category\",\n                \"name\": \"Loops\",\n                \"contents\": [\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"controls_repeat_ext\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"controls_whileUntil\"\n                  }\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"controls_for\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"controls_forEach\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"controls_flow_statements\"\n                  // }\n                ]\n              },\n              {\n                \"kind\": \"category\",\n                \"name\": \"Math\",\n                \"contents\": [\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"math_number\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"math_arithmetic\"\n                  }\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_single\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_trig\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_constant\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_number_property\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_round\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_on_list\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_modulo\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_constrain\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_random_int\"\n                  // },\n                  // {\n                  //   \"kind\": \"block\",\n                  //   \"type\": \"math_random_float\"\n                  // }\n                ]\n              },\n              // {\n              //   \"kind\": \"category\",\n              //   \"name\": \"Lists\",\n              //   \"contents\": [\n              //     {\n              //       \"kind\": \"block\",\n              //       \"type\": \"lists_create_empty\"\n              //     },\n              //     {\n              //       \"kind\": \"block\",\n              //       \"type\": \"lists_create_with\"\n              //     },\n              //     {\n              //       \"kind\": \"block\",\n              //       \"type\": \"lists_repeat\"\n              //     },\n              //     {\n              //       \"kind\": \"block\",\n              //       \"type\": \"lists_length\"\n              //     },\n              //     {\n              //       \"kind\": \"block\",\n              //       \"type\": \"lists_isEmpty\"\n              //     },\n              //     {\n              //       \"kind\": \"block\",\n              //       \"type\": \"lists_indexOf\"\n              //     }\n              //   ]\n              // },\n              {\n                \"kind\": \"category\",\n                \"name\": \"Text\",\n                \"contents\": [\n                    {\n                        \"kind\": \"block\",\n                        \"type\": \"text_print\"\n                    },\n                ]\n              },\n              {\n                \"kind\": \"category\",\n                \"name\": \"Variables\",\n                \"contents\": [\n                //   {\n                //     \"kind\": \"button\",\n                //     \"text\": \"Create variable\",\n                //     \"callbackKey\": \"CREATE_VARIABLE\"\n                //   },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"variables_set\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"variables_get\"\n                  }\n                ]\n              },\n              {\n                \"kind\": \"category\",\n                \"name\": \"Terra\",\n                \"contents\": [\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"instantiate\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"execute\"\n                  },\n                  {\n                    \"kind\": \"block\",\n                    \"type\": \"query\"\n                  }\n                ]\n              }\n            ]\n          };\n\n        const { initialXml, children, ...rest } = this.props;\n        this.primaryWorkspace = Blockly.inject(\n            this.blocklyDiv.current,\n            {\n                toolbox: toolboxx,\n                ...rest\n            },\n        );\n\n        // changes theme to dark mode\n        this.primaryWorkspace.setTheme(Blockly.Themes.Dark);\n\n        this.primaryWorkspace.registerButtonCallback(\"CREATE_VARIABLE\", () => {console.log(\"create variable\");});\n\n        if (initialXml) {\n            Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(initialXml), this.primaryWorkspace);\n        }\n    }\n\n  get workspace() {\n    return this.primaryWorkspace;\n  }\n\n  setXml(xml) {\n    Blockly.Xml.domToWorkspace(\n      Blockly.Xml.textToDom(xml),\n      this.primaryWorkspace\n    );\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <React.Fragment>\n        <div ref={this.blocklyDiv} id=\"blocklyDiv\" />\n        <xml\n          xmlns=\"https://developers.google.com/blockly/xml\"\n          is=\"blockly\"\n          style={{ display: \"none\" }}\n          ref={this.toolbox}\n        >\n          {children}\n        </xml>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BlocklyComponent;\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview XML wrappers for block, category, value, field and shadow.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n import React from 'react';\nimport BlocklyComponent from './BlocklyComponent';\n\nexport default BlocklyComponent;\n\nconst Block = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"block\", props, children);\n};\n\nconst Category = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"category\", props, children);\n};\n\nconst Value = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"value\", props, children);\n};\n\nconst Field = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"field\", props, children);\n};\n\nconst Shadow = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"shadow\", props, children);\n};\n\nexport { Block, Category, Value, Field, Shadow }","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define generation methods for custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on generating code:\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\n\nimport * as Blockly from 'blockly/core';\nimport 'blockly/javascript';\n\nBlockly.JavaScript['test_react_field'] = function (block) {\n    return 'console.log(\\'custom block\\');\\n';\n};\n\nBlockly.JavaScript['test_react_date_field'] = function (block) {\n    return 'console.log(' + block.getField('DATE').getText() + ');\\n';\n};\n\nBlockly.JavaScript['text_print'] = function(block) {\n    // Print statement.\n    var msg = Blockly.JavaScript.valueToCode(block, 'TEXT',\n        Blockly.JavaScript.ORDER_NONE) || '';\n    return 'println!(\"{}\", ' + msg + ');\\n';\n};\n\nBlockly.JavaScript['controls_if'] = function(block) {\n    // If/elseif/else condition.\n    var n = 0;\n    var code = '', branchCode, conditionCode;\n    if (Blockly.JavaScript.STATEMENT_PREFIX) {\n      // Automatic prefix insertion is switched off for this block.  Add manually.\n      code += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX,\n          block);\n    }\n    do {\n      conditionCode = Blockly.JavaScript.valueToCode(block, 'IF' + n,\n          Blockly.JavaScript.ORDER_NONE) || 'false';\n      branchCode = Blockly.JavaScript.statementToCode(block, 'DO' + n);\n      if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n        branchCode = Blockly.JavaScript.prefixLines(\n            Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n            block), Blockly.JavaScript.INDENT) + branchCode;\n      }\n      code += (n > 0 ? ' else ' : '') +\n          'if ' + conditionCode + ' {\\n' + branchCode + '}';\n      ++n;\n    } while (block.getInput('IF' + n));\n  \n    if (block.getInput('ELSE') || Blockly.JavaScript.STATEMENT_SUFFIX) {\n      branchCode = Blockly.JavaScript.statementToCode(block, 'ELSE');\n      if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n        branchCode = Blockly.JavaScript.prefixLines(\n            Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n            block), Blockly.JavaScript.INDENT) + branchCode;\n      }\n      code += ' else {\\n' + branchCode + '}';\n    }\n    return code + '\\n';\n  };\n\n  Blockly.JavaScript['controls_repeat_ext'] = function(block) {\n    // Repeat n times.\n    if (block.getField('TIMES')) {\n      // Internal number.\n      var repeats = String(Number(block.getFieldValue('TIMES')));\n    } else {\n      // External number.\n      var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\n          Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n    }\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n    branch = Blockly.JavaScript.addLoopTrap(branch, block);\n    var code = '';\n    var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        'count', Blockly.VARIABLE_CATEGORY_NAME);\n    var endVar = repeats;\n    if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\n      endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          'repeat_end', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'let ' + endVar + ' = ' + repeats + ';\\n';\n    }\n    code += 'for ' + loopVar + ' in 1..' + endVar + ' {\\n' + branch + '}\\n';\n    return code;\n  };\n\n  Blockly.JavaScript['controls_whileUntil'] = function(block) {\n    // Do while/until loop.\n    var until = block.getFieldValue('MODE') == 'UNTIL';\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\n        until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\n        Blockly.JavaScript.ORDER_NONE) || 'loop';\n    var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n    branch = Blockly.JavaScript.addLoopTrap(branch, block);\n    if (until) {\n      argument0 = '!' + argument0;\n    }\n    var return_statement;\n    if (argument0.match('loop')) {\n        return_statement = 'loop {' + branch + '}';\n    } else {\n        return_statement = 'while ' + argument0 + ' {' + branch + '}';\n    }\n    return return_statement + '\\n';\n  };\n\n  Blockly.JavaScript['variables_get'] = function(block) {\n    // Variable getter.\n    var code = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'),\n        Blockly.VARIABLE_CATEGORY_NAME);\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n  };\n\nBlockly.JavaScript['variables_set'] = function(block) {\n    // Variable setter.\n    var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n    var varName = Blockly.JavaScript.variableDB_.getName(\n        block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n    return varName + ' = ' + argument0 + ';\\n';\n  };\n\n  Blockly.JavaScript.init = function(workspace) {\n    // Create a dictionary of definitions to be printed before the code.\n    Blockly.JavaScript.definitions_ = Object.create(null);\n    // Create a dictionary mapping desired function names in definitions_\n    // to actual function names (to avoid collisions with user functions).\n    Blockly.JavaScript.functionNames_ = Object.create(null);\n  \n    if (!Blockly.JavaScript.variableDB_) {\n      Blockly.JavaScript.variableDB_ =\n          new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n    } else {\n      Blockly.JavaScript.variableDB_.reset();\n    }\n  \n    Blockly.JavaScript.variableDB_.setVariableMap(workspace.getVariableMap());\n  \n    var defvars = [];\n    // Add developer variables (not created or named by the user).\n    var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n    for (var i = 0; i < devVarList.length; i++) {\n      defvars.push(Blockly.JavaScript.variableDB_.getName(devVarList[i],\n          Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n    }\n  \n    // Add user variables, but only ones that are being used.\n    var variables = Blockly.Variables.allUsedVarModels(workspace);\n    for (var i = 0; i < variables.length; i++) {\n      defvars.push(Blockly.JavaScript.variableDB_.getName(variables[i].getId(),\n          Blockly.VARIABLE_CATEGORY_NAME));\n    }\n  \n    // Declare all of the variables.\n    if (defvars.length) {\n      Blockly.JavaScript.definitions_['variables'] =\n          'let ' + defvars.join(', ') + ';';\n    }\n  };\n  \n  Blockly.JavaScript['instantiate'] = function(block) {\n    var code = \n    `\n    pub fn instantiate (\n        deps: DepsMut,\n        _env: Env,\n        info: MessageInfo,\n        msg: InstantiateMsg,\n    ) -> Result <Response, ContractError> {\n        let state = State {\n            count: msg.count,\n            owner: info.sender.clone(),\n        };\n        set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?;\n        STATE.save(deps.storage, &state)?;\n    \n        Ok(Response::new()\n            .add_attribute(\"method\", \"instantiate\")\n            .add_attribute(\"owner\", info.sender)\n            .add_attribute(\"count\", msg.count.to_string())\n    }\\n\n    `;\n    return code;\n  };\n\n  Blockly.JavaScript['execute'] = function(block) {\n    var code = \n    `\n    pub fn execute (\n        deps: DepsMut,\n        _env: Env,\n        info: MessageInfo,\n        msg: ExecuteMsg,\n    ) -> Result <Response, ContractError> {\n        match msg {\n            ExecuteMsg::Increment {} => try_increment(deps),\n            ExecuteMsg::Reset { count } => try_reset(deps, count),\n        }\n    }\\n\n    `;\n    return code;\n  };\n\n  Blockly.JavaScript['query'] = function(block) {\n    var code = \n    `\n    pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {\n        match msg {\n            QueryMsg::GetCount {} => to_binary(&query_count(deps)?),\n        }\n    }\n    \n    fn query_count(deps: Deps) -> StdResult<CountResponse> {\n        let state = STATE.load(deps.storage)?;\n        Ok(CountResponse { count: state.count })\n    }\\n\n    `;\n    return code;\n  }","/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Main React component that includes the Blockly component.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\n//import loading from react bootstrap\nimport Spinner from \"react-bootstrap/Spinner\";\n\nimport logo from \"./logo.svg\";\n\nimport BlocklyComponent, { Block, Value, Field, Shadow } from \"./Blockly\";\n\nimport BlocklyJS from \"blockly/javascript\";\n\nimport \"./blocks/customblocks\";\nimport \"./generator/generator\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.simpleWorkspace = React.createRef();\n    this.state = { code: \"\", renderedCode: \"\", loading: false, success: false };\n  }\n\n  componentDidMount() {\n    this.simpleWorkspace.current.workspace.addChangeListener(this.generateCode);\n  }\n\n  generateCode = (event) => {\n    var code = BlocklyJS.workspaceToCode(\n      this.simpleWorkspace.current.workspace\n    );\n    this.setState({ renderedCode: code });\n    console.log(code);\n  };\n\n  deploy = async () => {\n    this.setState({ loading: true });\n    // fetch from an api\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ title: \"Wallet\" }),\n    };\n    fetch(\"https://reqres.in/api/posts\", requestOptions)\n      .then((response) => response.json())\n      .then((data) => {\n        // this.setState({ loading: false, success: true });\n        console.log(data);\n      });\n  };\n\n  //whenever the ref changes, console.log the code\n  onRefChange = (node) => {\n    console.log(\"onRefChange\");\n    console.log(node);\n  };\n\n  render() {\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div className=\"flex-child\" style={{ height: \"100vh\", width: \"70vw\" }}>\n          <BlocklyComponent\n            ref={this.simpleWorkspace}\n            readOnly={false}\n            trashcan={true}\n            media={\"media/\"}\n            move={{\n              scrollbars: true,\n              drag: true,\n              wheel: true,\n            }}\n            initialXml={`\n          <xml xmlns=\"http://www.w3.org/1999/xhtml\">\n          </xml>\n                `}\n          >\n            <Block type=\"test_react_field\" />\n            <Block type=\"test_react_date_field\" />\n            <Block type=\"controls_ifelse\" />\n            <Block type=\"logic_compare\" />\n            <Block type=\"logic_operation\" />\n            <Block type=\"controls_repeat_ext\">\n              <Value name=\"TIMES\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">10</Field>\n                </Shadow>\n              </Value>\n            </Block>\n            <Block type=\"logic_operation\" />\n            <Block type=\"logic_negate\" />\n            <Block type=\"logic_boolean\" />\n            <Block type=\"logic_null\" disabled=\"true\" />\n            <Block type=\"logic_ternary\" />\n            <Block type=\"text_charAt\">\n              <Value name=\"VALUE\">\n                <Block type=\"variables_get\">\n                  <Field name=\"VAR\">text</Field>\n                </Block>\n              </Value>\n            </Block>\n          </BlocklyComponent>\n        </div>\n        <div\n          className=\"flex-child scroll\"\n          style={{ maxWidth: \"30vw\", color: \"white\", backgroundColor: \"black\" }}\n        >\n          {!this.state.success ? (\n            !this.state.loading ? (\n              this.state.renderedCode.split(\"\\n\").map((line, i) => {\n                return (\n                  <p style={{ color: \"white\" }} key={i}>\n                    {line}\n                    <br />\n                  </p>\n                );\n              }, this)\n            ) : (\n              <Spinner animation=\"border\" variant=\"success\" />\n            )\n          ) : (\n            <h1>Deployed to Terra!</h1>\n          )}\n          {!this.state.success ? (\n            <div class=\"bottom-right\">\n              <input placeholder=\"Wallet Name:\"></input>\n              <br />\n              <input placeholder=\"Wallet Address:\"></input>\n              <br />\n              <input type=\"password\" placeholder=\"Wallet Password:\"></input>\n              <br />\n              <br />\n              <Button\n                style={{ marginLeft: \"60%\", marginRight: \"auto\" }}\n                variant=\"primary\"\n                onClick={this.deploy}\n              >\n                Deploy!\n              </Button>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}